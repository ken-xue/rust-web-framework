use std::ops::DerefMut;
use diesel::{BoxableExpression, ExpressionMethods, IntoSql, JoinOnDsl, OptionalExtension, QueryDsl, RunQueryDsl, SelectableHelper};
use diesel::result::Error;
use diesel::mysql::Mysql;
use diesel::sql_types::Bool;

use crate::database;
use crate::{{table.module_name}}::{{table.remove_prefix_table_name}}::model::{{table.entity_name}};
use crate::database::schema::{{table.table_info.table_name}}::dsl::*;
use crate::database::schema::{{table.table_info.table_name}};
use crate::{{table.module_name}}::{{table.remove_prefix_table_name}}::request::Page{List{{table.remove_prefix_entity_name}},{{table.remove_prefix_entity_name}}};

pub struct {{table.remove_prefix_entity_name}}Repo {
    conn: database::PoolConnection
}

impl {{table.remove_prefix_entity_name}}Repo {

    pub fn default() -> Self {
        let conn = database::pool();
        {{table.remove_prefix_entity_name}}Repo { conn }
    }

    pub fn new(conn: database::PoolConnection) -> Self {
        {{table.remove_prefix_entity_name}}Repo { conn }
    }

    pub fn get_by_id(&mut self, i: u64) -> Result<{{table.entity_name}}, anyhow::Error> {
        let ret = {{table.table_info.table_name}}.filter(id.eq(i))
            .select({{table.entity_name}}::as_select())
            .first(self.conn.deref_mut())?;
        Ok(ret)
    }

    pub fn update(&mut self,d: {{table.entity_name}}) -> Result<Option<usize>, anyhow::Error> {
        let ret = diesel::update({{table.table_info.table_name}}.filter(id.eq(d.id)))
            .set(&d)
            .execute(self.conn.deref_mut()).optional()?;
        Ok(ret)
    }

    pub fn add(&mut self, d: {{table.entity_name}}) -> Result<{{table.entity_name}}, anyhow::Error> {
        diesel::insert_into({{table.table_info.table_name}}::table).values(&d).execute(self.conn.deref_mut())?;
        Ok(d)
    }

    pub fn delete_by_ids(&mut self, ids: Vec<u64>,) -> Result<Option<usize>, anyhow::Error> {
        let ret = diesel::delete({{table.table_info.table_name}}.filter(id.eq_any(ids)))
            .execute(self.conn.deref_mut()).optional().map_err(Error::from)?;
        Ok(ret)
    }

    pub fn page(&mut self, page: Page{{table.remove_prefix_entity_name}}) -> Result<(Vec<{{table.entity_name}}>, i64), anyhow::Error> {
        let offset = page.page_size * (page.page - 1);
        let query_result = {{table.table_info.table_name}}.select({{table.entity_name}}::as_select()).limit(page.page_size).offset(offset).load::<{{table.entity_name}}>(self.conn.deref_mut())?;
        let total_count = {{table.table_info.table_name}}.count().first::<i64>(self.conn.deref_mut())?;
        let records: Vec<{{table.entity_name}}> = query_result.into_iter().map(|u| u.into()).collect();
        Ok((records, total_count))
    }

    pub fn list(&mut self,r: List{{table.remove_prefix_entity_name}}) -> Result<Vec<{{table.entity_name}}>, anyhow::Error> {
        let list = {{table.table_info.table_name}}.select({{table.entity_name}}::as_select()).load::<{{table.entity_name}}>(self.conn.deref_mut())?;
        Ok(list)
    }
}

// condition query

{{#each table.remove_common_field_table_columns as |t|}}
//{{column_comment}}
fn condition_eq_{{t.column_name}}(opt: Option<{{{t.column_mapping_type}}}>) -> Box<dyn BoxableExpression<{{{../table.table_info.table_name}}}::table, Mysql, SqlType = Bool>> {
    match opt {
        {{#if ../table.table_info.is_nullable}}
        Some(value) => Box::new({{t.column_name}}.eq(value).is_not_null()),
        {{else}}
        Some(value) => Box::new({{t.column_name}}.eq(value)),
        {{/if}}
        None => Box::new(true.into_sql::<Bool>()) // 不加条件
    }
}
{{/each}}
