use serde::{Deserialize};
use validator::{Validate};
use crate::{{table.module_name}}::{{table.remove_prefix_table_name}}::model::{{table.entity_name}};

#[derive(Debug, Validate, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Add{{table.remove_prefix_entity_name}} {
    //#[validate(length(min = 1, message = "Can not be empty"))]
{{#each table.table_columns as |t| }}
    pub {{t.column_name}}: {{{t.column_mapping_type}}},//{{column_comment}}
{{/each}}
}

#[derive(Debug, Validate, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Update{{table.remove_prefix_entity_name}} {
{{#each table.table_columns as |t| }}
    pub {{t.column_name}}: {{{t.column_mapping_type}}},//{{column_comment}}
{{/each}}
}

impl From<Add{{table.remove_prefix_entity_name}}> for {{table.entity_name}} {
    fn from(req: Add{{table.remove_prefix_entity_name}}) -> {{table.entity_name}} {
        {{table.entity_name}} {
        {{#each table.table_columns as |t| }}
            {{t.column_name}}: req.{{t.column_name}},//{{column_comment}}
        {{/each}}
        }
    }
}

impl From<Update{{table.remove_prefix_entity_name}}> for {{table.entity_name}} {
    fn from(req: Update{{table.remove_prefix_entity_name}}) -> {{table.entity_name}} {
        {{table.entity_name}} {
        {{#each table.table_columns as |t| }}
            {{t.column_name}}: req.{{t.column_name}},//{{column_comment}}
        {{/each}}
        }
    }
}