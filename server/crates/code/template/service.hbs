use anyhow::bail;
use crate::common::{request, response};
use crate::{{table.module_name}}::{{table.remove_prefix_table_name}}::response::{{table.remove_prefix_entity_name}}Response;
use crate::{{table.module_name}}::{{table.remove_prefix_table_name}}::model::{{table.entity_name}};
use crate::{{table.module_name}}::{{table.remove_prefix_table_name}}::repo::{{table.remove_prefix_entity_name}}Repo;
use crate::{{table.module_name}}::{{table.remove_prefix_table_name}}::request::{Add{{table.remove_prefix_entity_name}},Page{{table.remove_prefix_entity_name}},List{{table.remove_prefix_entity_name}}, Update{{table.remove_prefix_entity_name}} };

pub struct {{table.remove_prefix_entity_name}}Service {
    repo: {{table.remove_prefix_entity_name}}Repo,
}

impl {{table.remove_prefix_entity_name}}Service {

    pub fn default() -> Self {
        let repo = {{table.remove_prefix_entity_name}}Repo::default();
        {{table.remove_prefix_entity_name}}Service { repo }
    }

    pub fn new(repo: {{table.remove_prefix_entity_name}}Repo) -> Self {
        {{table.remove_prefix_entity_name}}Service { repo }
    }

    pub fn get_by_id(&mut self, i: u64) -> Result<{{table.remove_prefix_entity_name}}Response, anyhow::Error> {
        Ok(self.repo.get_by_id(i)?.into())
    }

    pub fn page(&mut self, r: Page{{table.remove_prefix_entity_name}}) -> Result<response::PageResponse<{{table.remove_prefix_entity_name}}Response>, anyhow::Error> {
        self.repo.page(r.clone()).map(|(records, total)|
            response::PageResponse::<{{table.remove_prefix_entity_name}}Response>::new(
                records.into_iter().map({{table.remove_prefix_entity_name}}Response::from).collect(), r.page, r.page_size, total))
    }

    pub fn list(&mut self,r:List{{table.remove_prefix_entity_name}}) -> Result<Vec<{{table.remove_prefix_entity_name}}Response>, anyhow::Error> {
        Ok(self.repo.list(r)?.into_iter().map(|d| {{table.remove_prefix_entity_name}}Response::from(d)).collect())
    }

    pub fn add(&mut self, u: Add{{table.remove_prefix_entity_name}}) -> Result<{{table.remove_prefix_entity_name}}Response,anyhow::Error> {
        Ok(self.repo.add(u.into())?.into())
    }

    pub fn update(&mut self, u: Update{{table.remove_prefix_entity_name}}) -> Result<usize,anyhow::Error> {
        Ok(self.repo.update(u.into())?.unwrap_or(0))
    }

    pub fn delete(&mut self, d: request::Delete) -> Result<usize,anyhow::Error> {
        Ok(self.repo.delete_by_ids(d.ids)?.unwrap_or(0))
    }
}