use std::error::Error;
use crate::common::{request, response};
use crate::system::{{table.remove_prefix_table_name}}::model::{{table.entity_name}};
use crate::system::{{table.remove_prefix_table_name}}::repo::UserRepo;
use crate::system::{{table.remove_prefix_table_name}}::request::{Create{{table.entity_name}}, Update{{table.entity_name}} };
use crate::util;

pub struct {{table.remove_prefix_entity_name}}Domain {
    repo: {{table.remove_prefix_entity_name}}Repo,
}

impl {{table.remove_prefix_entity_name}}Domain {
    
    pub fn new(repo: {{table.remove_prefix_entity_name}}Repo) -> Self {
        {{table.remove_prefix_entity_name}}Domain { repo }
    }

    pub fn get_by_id(&mut self, i: u64) -> Result<{{table.entity_name}}, Box<dyn Error>> {
        match self.repo.get_by_id(i) {
            Ok(do) => Ok(do),
            Err(e) => Err(format!("Error retrieving {{table.entity_name}}: {}", e).into()),
        }
    }

    pub fn page(&mut self, r: request::Page) -> Result<response::PageResponse<{{table.entity_name}}>, Box<dyn Error>> {
        match self.repo.page(r.page, r.size) {
            Ok((records, total)) => {
                let response = response::PageResponse::new(records, r.page, r.size, total);
                Ok(response)
            },
            Err(e) => Err(format!("Error retrieving {{table.entity_name}}: {}", e).into()),
        }
    }

    pub fn create(&mut self, u: CreateUser) -> Result<{{table.entity_name}},Box<dyn Error>> {
        let do: {{table.entity_name}} = u.into();
        match self.repo.create(do) {
            Ok(do) => Ok(do),
            Err(e) => Err(format!("Error create {{table.entity_name}}: {}", e).into()),
        }
    }

    pub fn update(&mut self, u: UpdateUser) -> Result<(),Box<dyn Error>> {
        let do: {{table.entity_name}} = u.into();
        match self.repo.update(do) {
            Ok(Some(update)) if update > 0 => Ok(()),
            Ok(_) => Err(format!("No {{table.entity_name}} was update").into()),
            Err(e) => Err(format!("Error update {{table.entity_name}}: {}", e).into()),
        }
    }

    pub fn delete(&mut self, d: request::Delete) -> Result<(),Box<dyn Error>> {
        match self.repo.delete_by_ids(d.ids) {
            Ok(Some(deleted)) if deleted > 0 => Ok(()),
            Ok(_) => Err(format!("No {{table.entity_name}} was deleted").into()),
            Err(e) => Err(format!("Error delete {{table.entity_name}} by ids: {}", e).into()),
        }
    }
}


impl From<CreateUser> for {{table.entity_name}} {
    fn from(user: CreateUser) -> {{table.entity_name}} {
        {{table.entity_name}} {
            id: 0,
            uuid: Some(util::uuid()),
            account: Option::from(user.account),
            password: Option::from(user.password),
            name: Some(user.name),
            email: Option::from(user.email),
            status: None,
            creator: None,
            modifier: None,
            gmt_create: Default::default(),
            gmt_modified: Default::default(),
            avatar: None,
            deleted: false,
        }
    }
}

impl From<UpdateUser> for {{table.entity_name}} {
    fn from(req: UpdateUser) -> {{table.entity_name}} {
        {{table.entity_name}} {
            id: req.id,
            uuid: None,
            account: Option::from(req.account),
            password: Option::from(req.password),
            name: Some(req.name),
            email: Option::from(req.email),
            status: None,
            creator: None,
            modifier: None,
            gmt_create: Default::default(),
            gmt_modified: Default::default(),
            avatar: None,
            deleted: false,
        }
    }
}